--ROLLBACK
--select gen_random_uuid ();
--CREATE EXTENSION "uuid-ossp"; 
CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE TABLE "T_ACUO_AUDIT" (
        "AL_ID" integer GENERATED BY DEFAULT AS IDENTITY,
        "AL_AUDIT_DATE" timestamp(3) NOT NULL,
        "AL_EVENT_TYPE" character varying(255) NOT NULL,
        "AL_USER" character varying(65),
        "AL_PT_ID" character varying(65),
        "AL_PT_NAME" character varying(65),
        "AL_ST_DICOM_UID" character varying(65),
        "AL_SE_MODALITY" character varying(17),
        "AL_SE_DICOM_UID" character varying(65),
        "AL_IM_SOPINSTANCE_UID" character varying(65),
        "AL_FILE_NAME" character varying(256),
        "AL_SOURCE" character varying(65),
        "AL_MACHINE" character varying(65),
        "AL_DATABASE" character varying(65),
        "AL_COMMENT" character varying(256),
        "AL_IHE_ID" uuid,
        "AL_ACCESSION_NUMBER" character varying(65),
        "AL_ACUOSTORE_SERVER_NAME" character varying(256),
        "AL_ACUOSTORE_APPLICATION_NAME" character varying(64),
        "AL_ACUOSTORE_USER_NAME" character varying(64),
        "AL_ACUOSTORE_USER_PASSWORD" character varying(64),
        "AL_RECYCLE_BIN_FOLDER" bytea,
        "AL_IMAGE_GUID" bytea,
        "AL_DELETION_SET_ID" character varying(256),
        "AL_VERIFIED_FOR_DELETION" boolean NOT NULL,
        "AL_RESTORED_LAST_DATE" timestamp(3),
        "AL_RESTORED_SERVER" character varying(256),
        "AL_RESTORED_PORT" integer,
        "AL_RESTORED_AE_NAME" character varying(17),
        "AL_RESTORE" boolean NOT NULL,
        CONSTRAINT "PK_T_ACUO_AUDIT__Id" PRIMARY KEY ("AL_ID")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE TABLE "T_CONFIG" (
        "CONFIG_ID" integer GENERATED BY DEFAULT AS IDENTITY,
        "CONFIG_DAYS_TO_KEEP_AUDITS" integer NOT NULL DEFAULT 30,
        "CONFIG_SECONDS_TO_CHECK_FOR_SYSLOG_CHANGES" integer NOT NULL DEFAULT 10,
        "CONFIG_SECONDS_TO_CHECK_FOR_SYSLOG_AUDITS" integer NOT NULL DEFAULT 5,
        "CONFIG_DAYS_TO_KEEP_ACUO_AUDITS" integer NOT NULL DEFAULT 30,
        "CONFIG_MINUTES_TO_KEEP_SYSLOG_TASKS" integer NOT NULL DEFAULT 1440,
        "CONFIG_DAYS_TO_KEEP_DELETED_IMAGES" integer NOT NULL DEFAULT 30,
        "CONFIG_DELETION_VERIFICATION_REQUIRED" boolean NOT NULL,
        "CONFIG_MANUAL_DELETION_ONLY" boolean NOT NULL,
        "CONFIG_DAYS_TO_KEEP_USER_AUDITS" integer NOT NULL,
        CONSTRAINT "PK_T_CONFIG__Id" PRIMARY KEY ("CONFIG_ID")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE TABLE "T_EVENTS" (
        "EV_ID" integer NOT NULL,
        "EV_TYPE" integer NOT NULL,
        "EV_CODE_SYSTEM" character varying(50) NOT NULL,
        "EV_ID_DESCRIPTION" character varying(50) NOT NULL,
        "EV_TYPE_DESCRIPTION" character varying(50),
        "EV_LOG_CREATE_SUPPORT" integer NOT NULL,
        "EV_LOG_READ_SUPPORT" integer NOT NULL,
        "EV_LOG_UPDATE_SUPPORT" integer NOT NULL,
        "EV_LOG_DELETE_SUPPORT" integer NOT NULL,
        "EV_LOG_EXECUTE_SUPPORT" integer NOT NULL,
        "EV_LOG_CREATE" boolean NOT NULL,
        "EV_LOG_READ" boolean NOT NULL,
        "EV_LOG_UPDATE" boolean NOT NULL,
        "EV_LOG_DELETE" boolean NOT NULL,
        "EV_LOG_EXECUTE" boolean NOT NULL,
        CONSTRAINT "PK_T_EVENTS__Id_Type" PRIMARY KEY ("EV_ID", "EV_TYPE")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE TABLE "T_IHE_AUDIT" (
        "IHE_AUDIT_ID" uuid NOT NULL,
        "IHE_LOCAL_DATE" timestamp(3) NOT NULL,
        "IHE_SYSLOG_SEVERITY" integer NOT NULL,
        "IHE_EVENT_ID" integer NOT NULL,
        "IHE_EVENT_TYPE" integer,
        "IHE_EVENT_ACTION" character(1) NOT NULL,
        "IHE_XML_MESSAGE" bytea NOT NULL,
        "IHE_VERIFIED_FOR_DELETION" boolean NOT NULL,
        CONSTRAINT "PK_T_IHE_AUDIT__AuditId" PRIMARY KEY ("IHE_AUDIT_ID")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE TABLE "T_SYSLOG" (
        "RS_ID" uuid NOT NULL DEFAULT ((gen_random_uuid ())),
        "RS_TYPE" character varying(10) NOT NULL,
        "RS_HOSTID" character varying(255) NOT NULL,
        "RS_PORT" integer NOT NULL,
        "RS_PAUSE" boolean NOT NULL,
        "RS_TLS_ENABLED" boolean,
        "RS_CLIENT_CERT" character varying(255),
        "RS_SERVER_CERT" character varying(255),
        CONSTRAINT "PK_T_SYSLOG__Id" PRIMARY KEY ("RS_ID")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE TABLE "T_TASKS" (
        "TASK_ID" integer GENERATED BY DEFAULT AS IDENTITY,
        "TASK_TARGET_ID" uuid NOT NULL,
        "TASK_IHE_AUDIT_ID" uuid NOT NULL,
        "TASK_STATUS" integer NOT NULL,
        "TASK_LAST_ERROR" character varying(255),
        "TASK_QUEUED_TIME" timestamp(3) NOT NULL,
        "TASK_XML_MESSAGE" bytea NOT NULL DEFAULT (('\000')),
        "TASK_RUN_COUNT" integer NOT NULL,
        CONSTRAINT "PK_T_TASKS__Id" PRIMARY KEY ("TASK_ID")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE TABLE "T_UPGRADE_BITMASK" (
        "MSK_KeyWord" character varying(40) NOT NULL,
        "MSK_Description" character varying(40) NOT NULL,
        "MSK_KeyType" integer NOT NULL,
        "MSK_MaskInteger" integer NOT NULL,
        CONSTRAINT "PK_T_UPGRADE_BITMASK__KeyWord" PRIMARY KEY ("MSK_KeyWord")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE TABLE "T_UPGRADE_DETAIL" (
        "DTL_Identity" integer GENERATED BY DEFAULT AS IDENTITY,
        "DTL_HST_Identity" integer NOT NULL,
        "DTL_UtcStartDate" timestamp(3) NOT NULL,
        "DTL_UtcEndDate" timestamp(3) NOT NULL,
        "DTL_Task" character varying(255),
        "DTL_Retry" smallint NOT NULL,
        CONSTRAINT "PK_T_UPGRADE_DETAIL__Identity" PRIMARY KEY ("DTL_Identity")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE TABLE "T_UPGRADE_HISTORY" (
        "HST_Identity" integer GENERATED BY DEFAULT AS IDENTITY,
        "HST_SQLEdition" character varying(20) NOT NULL,
        "HST_SQLVersion" character varying(20) NOT NULL,
        "HST_SQLLevel" character varying(5) NOT NULL,
        "HST_SQLMachine" character varying(50) NOT NULL,
        "HST_SQLInstance" character varying(50) NOT NULL,
        "HST_UtcStartDate" timestamp(3) NOT NULL,
        "HST_UtcEndDate" timestamp(3) NOT NULL,
        "HST_Old_Status" integer NOT NULL,
        "HST_Old_Major" integer NOT NULL,
        "HST_Old_Minor" integer NOT NULL,
        "HST_Old_SP" integer NOT NULL,
        "HST_Old_Build" integer NOT NULL,
        "HST_Old_DbSize" bigint NOT NULL DEFAULT -1,
        "HST_New_Status" integer NOT NULL,
        "HST_New_Major" integer NOT NULL,
        "HST_New_Minor" integer NOT NULL,
        "HST_New_SP" integer NOT NULL,
        "HST_New_Build" integer NOT NULL,
        "HST_New_DbSize" bigint NOT NULL DEFAULT -1,
        "HST_By_User" character varying(100) NOT NULL,
        "HST_Comment" character varying(100),
        "HST_State" integer NOT NULL,
        CONSTRAINT "PK_T_UPGRADE_HISTORY__Identity" PRIMARY KEY ("HST_Identity")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE TABLE "T_USER_AUDIT" (
        "UAA_AUDIT_ID" uuid NOT NULL DEFAULT ((gen_random_uuid ())),
        "UAA_AUDIT_DATE" timestamp(3) NOT NULL,
        "UAA_AUDIT_LEVEL" smallint,
        "UAA_AUDIT_ACTION" smallint,
        "UAA_USER_DOMAIN" character varying(65),
        "UAA_USER" character varying(65),
        "UAA_PT_ID" character varying(65) NOT NULL,
        "UAA_PT_NAME" character varying(65) NOT NULL,
        "UAA_ST_DICOM_UID" character varying(65),
        "UAA_ST_ACCESSION_NUMBER" character varying(65),
        "UAA_SE_DICOM_UID" character varying(65),
        "UAA_IM_DICOM_UID" character varying(65),
        "UAA_QUERY_STRING" text,
        "UAA_IHE_AUDIT" uuid,
        "UAA_VERIFIED_FOR_DELETION" boolean NOT NULL,
        CONSTRAINT "PK_T_USER_AUDIT" PRIMARY KEY ("UAA_AUDIT_ID")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE TABLE "T_VERSION_VER" (
        "VER_MAJOR" integer NOT NULL,
        "VER_MINOR" integer NOT NULL,
        "VER_REVISION" integer NOT NULL,
        "VER_BUILDNUMBER" integer NOT NULL
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE INDEX "IX_T_ACUO_AUDIT__AuditDate_EventType_ServerName" ON "T_ACUO_AUDIT" ("AL_AUDIT_DATE", "AL_EVENT_TYPE", "AL_ACUOSTORE_SERVER_NAME") WITH (fillfactor=100);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE INDEX "IX_T_IHE_AUDIT__LocalDate" ON "T_IHE_AUDIT" ("IHE_LOCAL_DATE") WITH (fillfactor=100);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE INDEX "IX_T_TASKS__TargetId_IheAuditId" ON "T_TASKS" ("TASK_TARGET_ID", "TASK_IHE_AUDIT_ID") WITH (fillfactor=100);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE INDEX "IX_T_UPGRADE_DETAIL__Task_HSTIdentity" ON "T_UPGRADE_DETAIL" ("DTL_Task", "DTL_HST_Identity") WITH (fillfactor=100);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE INDEX "IX_T_USER_AUDIT__AuditDate_Verified" ON "T_USER_AUDIT" ("UAA_AUDIT_DATE", "UAA_VERIFIED_FOR_DELETION" DESC);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE INDEX "IX_T_USER_AUDIT__PatientId" ON "T_USER_AUDIT" ("UAA_PT_ID");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE INDEX "IX_T_USER_AUDIT__PatientName" ON "T_USER_AUDIT" ("UAA_PT_NAME");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    CREATE INDEX "IX_T_USER_AUDIT__User" ON "T_USER_AUDIT" ("UAA_USER");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20240828111021_InitialSetup') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20240828111021_InitialSetup', '8.0.8');
    END IF;
END $EF$;
COMMIT;

