// <auto-generated />
using System;
using Acuo.IHEAudit.DAL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Acuo.IHEAudit.DAL.Original.SqlServer
{
    [DbContext(typeof(AcuoMedIHEAuditContext))]
    [Migration("20240828095112_InitialSetup")]
    partial class InitialSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Acuo.IHEAudit.DAL.Models.TAcuoAudit", b =>
                {
                    b.Property<int>("AlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AL_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlId"));

                    b.Property<string>("AlAccessionNumber")
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("AL_ACCESSION_NUMBER");

                    b.Property<string>("AlAcuostoreApplicationName")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("AL_ACUOSTORE_APPLICATION_NAME");

                    b.Property<string>("AlAcuostoreServerName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("AL_ACUOSTORE_SERVER_NAME");

                    b.Property<string>("AlAcuostoreUserName")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("AL_ACUOSTORE_USER_NAME");

                    b.Property<string>("AlAcuostoreUserPassword")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("AL_ACUOSTORE_USER_PASSWORD");

                    b.Property<DateTime>("AlAuditDate")
                        .HasColumnType("datetime")
                        .HasColumnName("AL_AUDIT_DATE");

                    b.Property<string>("AlComment")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("AL_COMMENT");

                    b.Property<string>("AlDatabase")
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("AL_DATABASE");

                    b.Property<string>("AlDeletionSetId")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("AL_DELETION_SET_ID");

                    b.Property<string>("AlEventType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AL_EVENT_TYPE");

                    b.Property<string>("AlFileName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("AL_FILE_NAME");

                    b.Property<Guid?>("AlIheId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AL_IHE_ID");

                    b.Property<string>("AlImSopinstanceUid")
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("AL_IM_SOPINSTANCE_UID");

                    b.Property<byte[]>("AlImageGuid")
                        .HasMaxLength(16)
                        .HasColumnType("binary(16)")
                        .HasColumnName("AL_IMAGE_GUID")
                        .IsFixedLength();

                    b.Property<string>("AlMachine")
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("AL_MACHINE");

                    b.Property<string>("AlPtId")
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("AL_PT_ID");

                    b.Property<string>("AlPtName")
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("AL_PT_NAME");

                    b.Property<byte[]>("AlRecycleBinFolder")
                        .HasMaxLength(16)
                        .HasColumnType("binary(16)")
                        .HasColumnName("AL_RECYCLE_BIN_FOLDER")
                        .IsFixedLength();

                    b.Property<bool>("AlRestore")
                        .HasColumnType("bit")
                        .HasColumnName("AL_RESTORE");

                    b.Property<string>("AlRestoredAeName")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("AL_RESTORED_AE_NAME");

                    b.Property<DateTime?>("AlRestoredLastDate")
                        .HasColumnType("datetime")
                        .HasColumnName("AL_RESTORED_LAST_DATE");

                    b.Property<int?>("AlRestoredPort")
                        .HasColumnType("int")
                        .HasColumnName("AL_RESTORED_PORT");

                    b.Property<string>("AlRestoredServer")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("AL_RESTORED_SERVER");

                    b.Property<string>("AlSeDicomUid")
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("AL_SE_DICOM_UID");

                    b.Property<string>("AlSeModality")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("AL_SE_MODALITY");

                    b.Property<string>("AlSource")
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("AL_SOURCE");

                    b.Property<string>("AlStDicomUid")
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("AL_ST_DICOM_UID");

                    b.Property<string>("AlUser")
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("AL_USER");

                    b.Property<bool>("AlVerifiedForDeletion")
                        .HasColumnType("bit")
                        .HasColumnName("AL_VERIFIED_FOR_DELETION");

                    b.HasKey("AlId")
                        .HasName("PK_T_ACUO_AUDIT__Id");

                    b.HasIndex(new[] { "AlAuditDate", "AlEventType", "AlAcuostoreServerName" }, "IX_T_ACUO_AUDIT__AuditDate_EventType_ServerName");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AlAuditDate", "AlEventType", "AlAcuostoreServerName" }, "IX_T_ACUO_AUDIT__AuditDate_EventType_ServerName"), 100);

                    b.ToTable("T_ACUO_AUDIT", (string)null);
                });

            modelBuilder.Entity("Acuo.IHEAudit.DAL.Models.TConfig", b =>
                {
                    b.Property<int>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CONFIG_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfigId"));

                    b.Property<int>("ConfigDaysToKeepAcuoAudits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(30)
                        .HasColumnName("CONFIG_DAYS_TO_KEEP_ACUO_AUDITS");

                    b.Property<int>("ConfigDaysToKeepAudits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(30)
                        .HasColumnName("CONFIG_DAYS_TO_KEEP_AUDITS");

                    b.Property<int>("ConfigDaysToKeepDeletedImages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(30)
                        .HasColumnName("CONFIG_DAYS_TO_KEEP_DELETED_IMAGES");

                    b.Property<int>("ConfigDaysToKeepUserAudits")
                        .HasColumnType("int")
                        .HasColumnName("CONFIG_DAYS_TO_KEEP_USER_AUDITS");

                    b.Property<bool>("ConfigDeletionVerificationRequired")
                        .HasColumnType("bit")
                        .HasColumnName("CONFIG_DELETION_VERIFICATION_REQUIRED");

                    b.Property<bool>("ConfigManualDeletionOnly")
                        .HasColumnType("bit")
                        .HasColumnName("CONFIG_MANUAL_DELETION_ONLY");

                    b.Property<int>("ConfigMinutesToKeepSyslogTasks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1440)
                        .HasColumnName("CONFIG_MINUTES_TO_KEEP_SYSLOG_TASKS");

                    b.Property<int>("ConfigSecondsToCheckForSyslogAudits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5)
                        .HasColumnName("CONFIG_SECONDS_TO_CHECK_FOR_SYSLOG_AUDITS");

                    b.Property<int>("ConfigSecondsToCheckForSyslogChanges")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10)
                        .HasColumnName("CONFIG_SECONDS_TO_CHECK_FOR_SYSLOG_CHANGES");

                    b.HasKey("ConfigId")
                        .HasName("PK_T_CONFIG__Id");

                    b.ToTable("T_CONFIG", (string)null);
                });

            modelBuilder.Entity("Acuo.IHEAudit.DAL.Models.TEvent", b =>
                {
                    b.Property<int>("EvId")
                        .HasColumnType("int")
                        .HasColumnName("EV_ID");

                    b.Property<int>("EvType")
                        .HasColumnType("int")
                        .HasColumnName("EV_TYPE");

                    b.Property<string>("EvCodeSystem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EV_CODE_SYSTEM");

                    b.Property<string>("EvIdDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EV_ID_DESCRIPTION");

                    b.Property<bool>("EvLogCreate")
                        .HasColumnType("bit")
                        .HasColumnName("EV_LOG_CREATE");

                    b.Property<int>("EvLogCreateSupport")
                        .HasColumnType("int")
                        .HasColumnName("EV_LOG_CREATE_SUPPORT");

                    b.Property<bool>("EvLogDelete")
                        .HasColumnType("bit")
                        .HasColumnName("EV_LOG_DELETE");

                    b.Property<int>("EvLogDeleteSupport")
                        .HasColumnType("int")
                        .HasColumnName("EV_LOG_DELETE_SUPPORT");

                    b.Property<bool>("EvLogExecute")
                        .HasColumnType("bit")
                        .HasColumnName("EV_LOG_EXECUTE");

                    b.Property<int>("EvLogExecuteSupport")
                        .HasColumnType("int")
                        .HasColumnName("EV_LOG_EXECUTE_SUPPORT");

                    b.Property<bool>("EvLogRead")
                        .HasColumnType("bit")
                        .HasColumnName("EV_LOG_READ");

                    b.Property<int>("EvLogReadSupport")
                        .HasColumnType("int")
                        .HasColumnName("EV_LOG_READ_SUPPORT");

                    b.Property<bool>("EvLogUpdate")
                        .HasColumnType("bit")
                        .HasColumnName("EV_LOG_UPDATE");

                    b.Property<int>("EvLogUpdateSupport")
                        .HasColumnType("int")
                        .HasColumnName("EV_LOG_UPDATE_SUPPORT");

                    b.Property<string>("EvTypeDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EV_TYPE_DESCRIPTION");

                    b.HasKey("EvId", "EvType")
                        .HasName("PK_T_EVENTS__Id_Type");

                    b.ToTable("T_EVENTS", (string)null);
                });

            modelBuilder.Entity("Acuo.IHEAudit.DAL.Models.TIheAudit", b =>
                {
                    b.Property<Guid>("IheAuditId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IHE_AUDIT_ID");

                    b.Property<string>("IheEventAction")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IHE_EVENT_ACTION")
                        .IsFixedLength();

                    b.Property<int>("IheEventId")
                        .HasColumnType("int")
                        .HasColumnName("IHE_EVENT_ID");

                    b.Property<int?>("IheEventType")
                        .HasColumnType("int")
                        .HasColumnName("IHE_EVENT_TYPE");

                    b.Property<DateTime>("IheLocalDate")
                        .HasColumnType("datetime")
                        .HasColumnName("IHE_LOCAL_DATE");

                    b.Property<int>("IheSyslogSeverity")
                        .HasColumnType("int")
                        .HasColumnName("IHE_SYSLOG_SEVERITY");

                    b.Property<bool>("IheVerifiedForDeletion")
                        .HasColumnType("bit")
                        .HasColumnName("IHE_VERIFIED_FOR_DELETION");

                    b.Property<byte[]>("IheXmlMessage")
                        .IsRequired()
                        .HasColumnType("image")
                        .HasColumnName("IHE_XML_MESSAGE");

                    b.HasKey("IheAuditId")
                        .HasName("PK_T_IHE_AUDIT__AuditId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IheAuditId"), false);

                    b.HasIndex(new[] { "IheLocalDate" }, "IX_T_IHE_AUDIT__LocalDate");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "IheLocalDate" }, "IX_T_IHE_AUDIT__LocalDate"));
                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IheLocalDate" }, "IX_T_IHE_AUDIT__LocalDate"), 100);

                    b.ToTable("T_IHE_AUDIT", (string)null);
                });

            modelBuilder.Entity("Acuo.IHEAudit.DAL.Models.TSyslog", b =>
                {
                    b.Property<Guid>("RsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RS_ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("RsClientCert")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("RS_CLIENT_CERT");

                    b.Property<string>("RsHostid")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("RS_HOSTID");

                    b.Property<bool>("RsPause")
                        .HasColumnType("bit")
                        .HasColumnName("RS_PAUSE");

                    b.Property<int>("RsPort")
                        .HasColumnType("int")
                        .HasColumnName("RS_PORT");

                    b.Property<string>("RsServerCert")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("RS_SERVER_CERT");

                    b.Property<bool?>("RsTlsEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("RS_TLS_ENABLED");

                    b.Property<string>("RsType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("RS_TYPE");

                    b.HasKey("RsId")
                        .HasName("PK_T_SYSLOG__Id");

                    b.ToTable("T_SYSLOG", (string)null);
                });

            modelBuilder.Entity("Acuo.IHEAudit.DAL.Models.TTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TASK_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<Guid>("TaskIheAuditId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TASK_IHE_AUDIT_ID");

                    b.Property<string>("TaskLastError")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("TASK_LAST_ERROR");

                    b.Property<DateTime>("TaskQueuedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("TASK_QUEUED_TIME");

                    b.Property<int>("TaskRunCount")
                        .HasColumnType("int")
                        .HasColumnName("TASK_RUN_COUNT");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("int")
                        .HasColumnName("TASK_STATUS");

                    b.Property<Guid>("TaskTargetId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TASK_TARGET_ID");

                    b.Property<byte[]>("TaskXmlMessage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("image")
                        .HasColumnName("TASK_XML_MESSAGE")
                        .HasDefaultValueSql("(0x00)");

                    b.HasKey("TaskId")
                        .HasName("PK_T_TASKS__Id");

                    b.HasIndex(new[] { "TaskTargetId", "TaskIheAuditId" }, "IX_T_TASKS__TargetId_IheAuditId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TaskTargetId", "TaskIheAuditId" }, "IX_T_TASKS__TargetId_IheAuditId"), 90);

                    b.ToTable("T_TASKS", (string)null);
                });

            modelBuilder.Entity("Acuo.IHEAudit.DAL.Models.TUpgradeBitmask", b =>
                {
                    b.Property<string>("MskKeyWord")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("MSK_KeyWord");

                    b.Property<string>("MskDescription")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("MSK_Description");

                    b.Property<int>("MskKeyType")
                        .HasColumnType("int")
                        .HasColumnName("MSK_KeyType");

                    b.Property<int>("MskMaskInteger")
                        .HasColumnType("int")
                        .HasColumnName("MSK_MaskInteger");

                    b.HasKey("MskKeyWord")
                        .HasName("PK_T_UPGRADE_BITMASK__KeyWord");

                    b.ToTable("T_UPGRADE_BITMASK", (string)null);
                });

            modelBuilder.Entity("Acuo.IHEAudit.DAL.Models.TUpgradeDetail", b =>
                {
                    b.Property<int>("DtlIdentity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DTL_Identity");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DtlIdentity"));

                    b.Property<int>("DtlHstIdentity")
                        .HasColumnType("int")
                        .HasColumnName("DTL_HST_Identity");

                    b.Property<short>("DtlRetry")
                        .HasColumnType("smallint")
                        .HasColumnName("DTL_Retry");

                    b.Property<string>("DtlTask")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DTL_Task");

                    b.Property<DateTime>("DtlUtcEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("DTL_UtcEndDate");

                    b.Property<DateTime>("DtlUtcStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("DTL_UtcStartDate");

                    b.HasKey("DtlIdentity")
                        .HasName("PK_T_UPGRADE_DETAIL__Identity");

                    b.HasIndex(new[] { "DtlTask", "DtlHstIdentity" }, "IX_T_UPGRADE_DETAIL__Task_HSTIdentity");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DtlTask", "DtlHstIdentity" }, "IX_T_UPGRADE_DETAIL__Task_HSTIdentity"), 100);

                    b.ToTable("T_UPGRADE_DETAIL", (string)null);
                });

            modelBuilder.Entity("Acuo.IHEAudit.DAL.Models.TUpgradeHistory", b =>
                {
                    b.Property<int>("HstIdentity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HST_Identity");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HstIdentity"));

                    b.Property<string>("HstByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("HST_By_User");

                    b.Property<string>("HstComment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("HST_Comment");

                    b.Property<int>("HstNewBuild")
                        .HasColumnType("int")
                        .HasColumnName("HST_New_Build");

                    b.Property<long>("HstNewDbSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(-1L)
                        .HasColumnName("HST_New_DbSize");

                    b.Property<int>("HstNewMajor")
                        .HasColumnType("int")
                        .HasColumnName("HST_New_Major");

                    b.Property<int>("HstNewMinor")
                        .HasColumnType("int")
                        .HasColumnName("HST_New_Minor");

                    b.Property<int>("HstNewSp")
                        .HasColumnType("int")
                        .HasColumnName("HST_New_SP");

                    b.Property<int>("HstNewStatus")
                        .HasColumnType("int")
                        .HasColumnName("HST_New_Status");

                    b.Property<int>("HstOldBuild")
                        .HasColumnType("int")
                        .HasColumnName("HST_Old_Build");

                    b.Property<long>("HstOldDbSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(-1L)
                        .HasColumnName("HST_Old_DbSize");

                    b.Property<int>("HstOldMajor")
                        .HasColumnType("int")
                        .HasColumnName("HST_Old_Major");

                    b.Property<int>("HstOldMinor")
                        .HasColumnType("int")
                        .HasColumnName("HST_Old_Minor");

                    b.Property<int>("HstOldSp")
                        .HasColumnType("int")
                        .HasColumnName("HST_Old_SP");

                    b.Property<int>("HstOldStatus")
                        .HasColumnType("int")
                        .HasColumnName("HST_Old_Status");

                    b.Property<string>("HstSqledition")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("HST_SQLEdition");

                    b.Property<string>("HstSqlinstance")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("HST_SQLInstance");

                    b.Property<string>("HstSqllevel")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("HST_SQLLevel");

                    b.Property<string>("HstSqlmachine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("HST_SQLMachine");

                    b.Property<string>("HstSqlversion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("HST_SQLVersion");

                    b.Property<int>("HstState")
                        .HasColumnType("int")
                        .HasColumnName("HST_State");

                    b.Property<DateTime>("HstUtcEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("HST_UtcEndDate");

                    b.Property<DateTime>("HstUtcStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("HST_UtcStartDate");

                    b.HasKey("HstIdentity")
                        .HasName("PK_T_UPGRADE_HISTORY__Identity");

                    b.ToTable("T_UPGRADE_HISTORY", (string)null);
                });

            modelBuilder.Entity("Acuo.IHEAudit.DAL.Models.TUserAudit", b =>
                {
                    b.Property<Guid>("UaaAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UAA_AUDIT_ID")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<short?>("UaaAuditAction")
                        .HasColumnType("smallint")
                        .HasColumnName("UAA_AUDIT_ACTION");

                    b.Property<DateTime>("UaaAuditDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UAA_AUDIT_DATE");

                    b.Property<short?>("UaaAuditLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("UAA_AUDIT_LEVEL");

                    b.Property<Guid?>("UaaIheAudit")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UAA_IHE_AUDIT");

                    b.Property<string>("UaaImDicomUid")
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("UAA_IM_DICOM_UID");

                    b.Property<string>("UaaPtId")
                        .IsRequired()
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("UAA_PT_ID");

                    b.Property<string>("UaaPtName")
                        .IsRequired()
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("UAA_PT_NAME");

                    b.Property<string>("UaaQueryString")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("UAA_QUERY_STRING");

                    b.Property<string>("UaaSeDicomUid")
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("UAA_SE_DICOM_UID");

                    b.Property<string>("UaaStAccessionNumber")
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("UAA_ST_ACCESSION_NUMBER");

                    b.Property<string>("UaaStDicomUid")
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("UAA_ST_DICOM_UID");

                    b.Property<string>("UaaUser")
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("UAA_USER");

                    b.Property<string>("UaaUserDomain")
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("UAA_USER_DOMAIN");

                    b.Property<bool>("UaaVerifiedForDeletion")
                        .HasColumnType("bit")
                        .HasColumnName("UAA_VERIFIED_FOR_DELETION");

                    b.HasKey("UaaAuditId");

                    b.HasIndex(new[] { "UaaAuditDate", "UaaVerifiedForDeletion" }, "IX_T_USER_AUDIT__AuditDate_Verified")
                        .IsDescending(false, true);

                    b.HasIndex(new[] { "UaaPtId" }, "IX_T_USER_AUDIT__PatientId");

                    b.HasIndex(new[] { "UaaPtName" }, "IX_T_USER_AUDIT__PatientName");

                    b.HasIndex(new[] { "UaaUser" }, "IX_T_USER_AUDIT__User");

                    b.ToTable("T_USER_AUDIT", (string)null);
                });

            modelBuilder.Entity("Acuo.IHEAudit.DAL.Models.TVersionVer", b =>
                {
                    b.Property<int>("VerBuildnumber")
                        .HasColumnType("int")
                        .HasColumnName("VER_BUILDNUMBER");

                    b.Property<int>("VerMajor")
                        .HasColumnType("int")
                        .HasColumnName("VER_MAJOR");

                    b.Property<int>("VerMinor")
                        .HasColumnType("int")
                        .HasColumnName("VER_MINOR");

                    b.Property<int>("VerRevision")
                        .HasColumnType("int")
                        .HasColumnName("VER_REVISION");

                    b.ToTable("T_VERSION_VER", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
