// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Acuo.IHEAudit.DAL.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Acuo.IHEAudit.DAL.Models
{
    public partial class AcuoMedIHEAuditContext
    {
        private IAcuoMedIHEAuditContextProcedures _procedures;

        public virtual IAcuoMedIHEAuditContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new AcuoMedIHEAuditContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IAcuoMedIHEAuditContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class AcuoMedIHEAuditContextProcedures : IAcuoMedIHEAuditContextProcedures
    {
        private readonly AcuoMedIHEAuditContext _context;

        public AcuoMedIHEAuditContextProcedures(AcuoMedIHEAuditContext context)
        {
            _context = context;
        }

        public virtual async Task<int> GetSqlTransAppLockAsync(string Resource, int? TimeOut, OutputParameter<int?> p2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterp2 = new SqlParameter
            {
                ParameterName = "p2",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = p2?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Resource",
                    Size = 510,
                    Value = Resource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterp2,
                new SqlParameter
                {
                    ParameterName = "TimeOut",
                    Value = TimeOut ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetSqlTransAppLock] @Resource = @Resource, @p2 = @p2 OUTPUT, @TimeOut = @TimeOut", sqlParameters, cancellationToken);

            p2.SetValue(parameterp2.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GrantRightsOnUpdateResult>> GrantRightsOnUpdateAsync(bool? AcuoOnly, byte? FixDbo, byte? FixMap, byte? FixUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AcuoOnly",
                    Value = AcuoOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FixDbo",
                    Value = FixDbo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "FixMap",
                    Value = FixMap ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "FixUser",
                    Value = FixUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GrantRightsOnUpdateResult>("EXEC @returnValue = [dbo].[GrantRightsOnUpdate] @AcuoOnly = @AcuoOnly, @FixDbo = @FixDbo, @FixMap = @FixMap, @FixUser = @FixUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PR_QU_GrantRightsToRolesResult>> PR_QU_GrantRightsToRolesAsync(bool? AcuoOnly, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AcuoOnly",
                    Value = AcuoOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_QU_GrantRightsToRolesResult>("EXEC @returnValue = [dbo].[PR_QU_GrantRightsToRoles] @AcuoOnly = @AcuoOnly", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PR_QU_RepairDatabaseResult>> PR_QU_RepairDatabaseAsync(bool? AcuoOnly, byte? FixDbo, byte? FixMap, byte? FixUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AcuoOnly",
                    Value = AcuoOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FixDbo",
                    Value = FixDbo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "FixMap",
                    Value = FixMap ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "FixUser",
                    Value = FixUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_QU_RepairDatabaseResult>("EXEC @returnValue = [dbo].[PR_QU_RepairDatabase] @AcuoOnly = @AcuoOnly, @FixDbo = @FixDbo, @FixMap = @FixMap, @FixUser = @FixUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PR_QU_UPGRADE_SummaryResult>> PR_QU_UPGRADE_SummaryAsync(int? pMaxResults, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pMaxResults",
                    Value = pMaxResults ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_QU_UPGRADE_SummaryResult>("EXEC @returnValue = [dbo].[PR_QU_UPGRADE_Summary] @pMaxResults = @pMaxResults", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReleaseSqlTransAppLockAsync(string Resource, OutputParameter<int?> p2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterp2 = new SqlParameter
            {
                ParameterName = "p2",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = p2?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Resource",
                    Size = 510,
                    Value = Resource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterp2,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ReleaseSqlTransAppLock] @Resource = @Resource, @p2 = @p2 OUTPUT", sqlParameters, cancellationToken);

            p2.SetValue(parameterp2.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_AUDITS_DELETE_ACUO_AUDITSResult>> SP_AUDITS_DELETE_ACUO_AUDITSAsync(bool? DaysToMinutes, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DaysToMinutes",
                    Value = DaysToMinutes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_AUDITS_DELETE_ACUO_AUDITSResult>("EXEC @returnValue = [dbo].[SP_AUDITS_DELETE_ACUO_AUDITS] @DaysToMinutes = @DaysToMinutes", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP_AUDITS_DELETE_IHE_AUDITSAsync(bool? DaysToMinutes, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DaysToMinutes",
                    Value = DaysToMinutes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_AUDITS_DELETE_IHE_AUDITS] @DaysToMinutes = @DaysToMinutes", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP_AUDITS_DELETE_USER_AUDITSAsync(bool? DaysToMinutes, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DaysToMinutes",
                    Value = DaysToMinutes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_AUDITS_DELETE_USER_AUDITS] @DaysToMinutes = @DaysToMinutes", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP_AUDITS_UPDATE_RECYLCE_BIN_PARMSAsync(int? AuditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AuditId",
                    Value = AuditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_AUDITS_UPDATE_RECYLCE_BIN_PARMS] @AuditId = @AuditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_CONFIG_SELECTResult>> SP_CONFIG_SELECTAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_CONFIG_SELECTResult>("EXEC @returnValue = [dbo].[SP_CONFIG_SELECT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP_EVENT_AUDIT_CHECKAsync(int? EV_ID, int? EV_TYPE, int? EV_ACTION, OutputParameter<int?> EV_SUPPORTED, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterEV_SUPPORTED = new SqlParameter
            {
                ParameterName = "EV_SUPPORTED",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = EV_SUPPORTED?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EV_ID",
                    Value = EV_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EV_TYPE",
                    Value = EV_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EV_ACTION",
                    Value = EV_ACTION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterEV_SUPPORTED,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_EVENT_AUDIT_CHECK] @EV_ID = @EV_ID, @EV_TYPE = @EV_TYPE, @EV_ACTION = @EV_ACTION, @EV_SUPPORTED = @EV_SUPPORTED OUTPUT", sqlParameters, cancellationToken);

            EV_SUPPORTED.SetValue(parameterEV_SUPPORTED.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP_IHEAUDIT_INSERTAsync(int? IHE_EVENT_ID, int? IHE_EVENT_TYPE, string IHE_ACTION_CODE, int? IHE_SYSLOG_SEVERITY, byte[] IHE_XML_MESSAGE, string ACUO_EVENT_TYPE, string ACUO_USER, string ACUO_PT_ID, string ACUO_PT_NAME, string ACUO_ST_DICOM_UID, string ACUO_SE_MODALITY, string ACUO_SE_DICOM_UID, string ACUO_IM_SOPINSTANCE_UID, string ACUO_FILE_NAME, string ACUO_SOURCE, string ACUO_MACHINE, string ACUO_DATABASE, string ACUO_COMMENTS, string ACUO_ACCESSION_NUMBER, string ACUO_ACUOSTORE_SERVER, string ACUO_ACUOSTORE_APPL, string ACUO_ACUOSTORE_USERNAME, string ACUO_ACUOSTORE_PASSWORD, byte[] ACUO_RECYCLE_BIN_FOLDER, byte[] ACUO_IMAGE_GUID, string AL_DELETION_SET_ID, string AL_QUERY_STRING, short? AL_AUDIT_LEVEL, short? AL_AUDIT_ACTION, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IHE_EVENT_ID",
                    Value = IHE_EVENT_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IHE_EVENT_TYPE",
                    Value = IHE_EVENT_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IHE_ACTION_CODE",
                    Size = 1,
                    Value = IHE_ACTION_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "IHE_SYSLOG_SEVERITY",
                    Value = IHE_SYSLOG_SEVERITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IHE_XML_MESSAGE",
                    Value = IHE_XML_MESSAGE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_EVENT_TYPE",
                    Size = 255,
                    Value = ACUO_EVENT_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_USER",
                    Size = 65,
                    Value = ACUO_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_PT_ID",
                    Size = 65,
                    Value = ACUO_PT_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_PT_NAME",
                    Size = 65,
                    Value = ACUO_PT_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_ST_DICOM_UID",
                    Size = 65,
                    Value = ACUO_ST_DICOM_UID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_SE_MODALITY",
                    Size = 617,
                    Value = ACUO_SE_MODALITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_SE_DICOM_UID",
                    Size = 65,
                    Value = ACUO_SE_DICOM_UID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_IM_SOPINSTANCE_UID",
                    Size = 65,
                    Value = ACUO_IM_SOPINSTANCE_UID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_FILE_NAME",
                    Size = 256,
                    Value = ACUO_FILE_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_SOURCE",
                    Size = 65,
                    Value = ACUO_SOURCE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_MACHINE",
                    Size = 65,
                    Value = ACUO_MACHINE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_DATABASE",
                    Size = 65,
                    Value = ACUO_DATABASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_COMMENTS",
                    Size = 256,
                    Value = ACUO_COMMENTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_ACCESSION_NUMBER",
                    Size = 65,
                    Value = ACUO_ACCESSION_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_ACUOSTORE_SERVER",
                    Size = 256,
                    Value = ACUO_ACUOSTORE_SERVER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_ACUOSTORE_APPL",
                    Size = 64,
                    Value = ACUO_ACUOSTORE_APPL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_ACUOSTORE_USERNAME",
                    Size = 64,
                    Value = ACUO_ACUOSTORE_USERNAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_ACUOSTORE_PASSWORD",
                    Size = 64,
                    Value = ACUO_ACUOSTORE_PASSWORD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_RECYCLE_BIN_FOLDER",
                    Size = 16,
                    Value = ACUO_RECYCLE_BIN_FOLDER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Binary,
                },
                new SqlParameter
                {
                    ParameterName = "ACUO_IMAGE_GUID",
                    Size = 16,
                    Value = ACUO_IMAGE_GUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Binary,
                },
                new SqlParameter
                {
                    ParameterName = "AL_DELETION_SET_ID",
                    Size = 256,
                    Value = AL_DELETION_SET_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AL_QUERY_STRING",
                    Size = -1,
                    Value = AL_QUERY_STRING ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AL_AUDIT_LEVEL",
                    Value = AL_AUDIT_LEVEL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "AL_AUDIT_ACTION",
                    Value = AL_AUDIT_ACTION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_IHEAUDIT_INSERT] @IHE_EVENT_ID = @IHE_EVENT_ID, @IHE_EVENT_TYPE = @IHE_EVENT_TYPE, @IHE_ACTION_CODE = @IHE_ACTION_CODE, @IHE_SYSLOG_SEVERITY = @IHE_SYSLOG_SEVERITY, @IHE_XML_MESSAGE = @IHE_XML_MESSAGE, @ACUO_EVENT_TYPE = @ACUO_EVENT_TYPE, @ACUO_USER = @ACUO_USER, @ACUO_PT_ID = @ACUO_PT_ID, @ACUO_PT_NAME = @ACUO_PT_NAME, @ACUO_ST_DICOM_UID = @ACUO_ST_DICOM_UID, @ACUO_SE_MODALITY = @ACUO_SE_MODALITY, @ACUO_SE_DICOM_UID = @ACUO_SE_DICOM_UID, @ACUO_IM_SOPINSTANCE_UID = @ACUO_IM_SOPINSTANCE_UID, @ACUO_FILE_NAME = @ACUO_FILE_NAME, @ACUO_SOURCE = @ACUO_SOURCE, @ACUO_MACHINE = @ACUO_MACHINE, @ACUO_DATABASE = @ACUO_DATABASE, @ACUO_COMMENTS = @ACUO_COMMENTS, @ACUO_ACCESSION_NUMBER = @ACUO_ACCESSION_NUMBER, @ACUO_ACUOSTORE_SERVER = @ACUO_ACUOSTORE_SERVER, @ACUO_ACUOSTORE_APPL = @ACUO_ACUOSTORE_APPL, @ACUO_ACUOSTORE_USERNAME = @ACUO_ACUOSTORE_USERNAME, @ACUO_ACUOSTORE_PASSWORD = @ACUO_ACUOSTORE_PASSWORD, @ACUO_RECYCLE_BIN_FOLDER = @ACUO_RECYCLE_BIN_FOLDER, @ACUO_IMAGE_GUID = @ACUO_IMAGE_GUID, @AL_DELETION_SET_ID = @AL_DELETION_SET_ID, @AL_QUERY_STRING = @AL_QUERY_STRING, @AL_AUDIT_LEVEL = @AL_AUDIT_LEVEL, @AL_AUDIT_ACTION = @AL_AUDIT_ACTION", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP_TASKS_DELETEAsync(bool? DaysToMinutes, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DaysToMinutes",
                    Value = DaysToMinutes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_TASKS_DELETE] @DaysToMinutes = @DaysToMinutes", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_TASKS_GET_BY_TARGET_IDResult>> SP_TASKS_GET_BY_TARGET_IDAsync(Guid? TARGET_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TARGET_ID",
                    Value = TARGET_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_TASKS_GET_BY_TARGET_IDResult>("EXEC @returnValue = [dbo].[SP_TASKS_GET_BY_TARGET_ID] @TARGET_ID = @TARGET_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP_TASKS_UPDATEAsync(int? taskId, int? taskStatus, string taskLastError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "taskId",
                    Value = taskId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "taskStatus",
                    Value = taskStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "taskLastError",
                    Size = 510,
                    Value = taskLastError ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_TASKS_UPDATE] @taskId = @taskId, @taskStatus = @taskStatus, @taskLastError = @taskLastError", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> USP_RethrowErrorAsync(string pRoutine, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pRoutine",
                    Size = 256,
                    Value = pRoutine ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[USP_RethrowError] @pRoutine = @pRoutine", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
